{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "Template to Create AutoScaling group with ELB and Notification",

  "Parameters": {
    "NotificationEMailId": {
      "Description": "EMail address to notify if there are any scaling operations",
      "Type": "String",
      "AllowedPattern": "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)",
      "ConstraintDescription": "must be a valid email address."
    },
    "EC2InstanceType": {
      "Description": "EC2 instance Type",
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro",
        "m1.small"
      ]
    },
    "AMIId": {
      "Description": "Provide AMI Id of the image",
      "Type": "String",
      "Default": "ami-162c2575"
    },
    "PublicORPrivate": {
      "Description": "Should we assign Public IPs to Instances",
      "Type": "String",
      "Default": "Private",
      "AllowedValues": [
        "Public",
        "Private"
      ]
    },
    "SSHLocation": {
      "Description": "IP range to allow SSH access",
      "Type": "String",
      "ConstraintDescription": "Must be in the form of CIDR",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    },
    "Network": {
      "Description": "VPC",
      "Type": "String",
      "ConstraintDescription": "must be one of the existing VPCs"
    },
    "ELBInternetFacing": {
      "Description": "Do you want to make ELB Internet facing?",
      "Type": "String",
      "Default": "internal",
      "AllowedValues": [
        "internal",
        "internet-facing"
      ]
    },
    "SubnetsforAutoScaling": {
      "Description": "Select the subnets where EC2 Instances to be launched",
      "Type": "CommaDelimitedList"
    },
    "HealthCheckWaitTime": {
      "Description": "Time to wait before start checking EC2 health",
      "Type": "Number",
      "Default": 30
    },
    "ScalingWaitTime": {
      "Description": "Amount of Time to wait between trigger related scaling activities",
      "Type": "Number",
      "Default": 180
    }
  },

  "Conditions" : {
     "AssignPublicIP": {"Fn::Equals" : [{"Ref" : "PublicORPrivate"}, "Public"]} 
  },

  "Resources" : {

    "NotificationTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "Subscription": [ { "Endpoint": { "Ref": "NotificationEMailId" }, "Protocol": "email" } ]
      }
    },
    "ElasticLoadBalancer": {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "Subnets" : {"Ref": "SubnetsforAutoScaling"},
        "CrossZone" : "true",
        "Scheme": {"Ref": "ELBInternetFacing"},
        "Listeners" : [ {
          "LoadBalancerPort" : "80",
          "InstancePort" : "80",
          "Protocol" : "HTTP"
        },
          {
            "LoadBalancerPort" : "22",
            "InstancePort" : "22",
            "Protocol" : "tcp"
          }],
        "HealthCheck" : {
          "Target" : "HTTP:80/",
          "HealthyThreshold" : "3",
          "UnhealthyThreshold" : "5",
          "Interval" : "30",
          "Timeout" : "5"
        },
        "SecurityGroups": [{"Ref": "ELBSG"}]
      }
    },
    "ELBSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription" : "Enable HTTP from Internet to ELB",
        "VpcId" : {"Ref" : "Network"},
        "SecurityGroupIngress" : [ {
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80",
          "CidrIp": {
            "Ref": "SSHLocation"
          }
        },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          }]
      }
    },
    "InstanceSG": {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP from the load balancer only and SSH from the location selected",
        "VpcId" : {"Ref" : "Network"},
        "SecurityGroupIngress" : [ {
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" : { "Ref" : "SSHLocation"}
        }, {
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "SourceSecurityGroupId": {"Fn::GetAtt" : ["ELBSG", "GroupId"]}
        },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "SourceSecurityGroupId": {"Fn::GetAtt" : ["ELBSG", "GroupId"]}
          }]
      }
    },
    "LaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": {"Ref": "AMIId"},
        "InstanceType": {"Ref": "EC2InstanceType"},
        "AssociatePublicIpAddress": { "Fn::If" : [
          "AssignPublicIP",
          true,
          false
        ]},
        "SecurityGroups": [{"Ref": "InstanceSG"}],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join" : [ "", [
              "#!/bin/bash -xe\n",
              "/opt/aws/bin/cfn-signal -e $? --stack ", { "Ref": "AWS::StackName" },
              " --resource AutoScalingConfiguration ",
              " --region ", { "Ref" : "AWS::Region" }, "\n"
            ] ]
          }
        }
      }
    },

    "AutoScalingConfiguration": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones" : { "Fn::GetAZs" : ""},
        "LaunchConfigurationName" : { "Ref" : "LaunchConfiguration" },
        "VPCZoneIdentifier": {"Ref": "SubnetsforAutoScaling"},
        "MinSize": 1,
        "DesiredCapacity": 1,
        "MaxSize": 3,
        "HealthCheckGracePeriod": {"Ref": "HealthCheckWaitTime"},
        "TerminationPolicies": ["OldestInstance","OldestLaunchConfiguration"],
        "LoadBalancerNames" : [ { "Ref" : "ElasticLoadBalancer" } ],
        "NotificationConfigurations" : [{
          "TopicARN" : { "Ref" : "NotificationTopic" },
          "NotificationTypes" : [ "autoscaling:EC2_INSTANCE_LAUNCH",
            "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
            "autoscaling:EC2_INSTANCE_TERMINATE",
            "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"]
        }
        ]
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M",
          "Count"   : "1"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime" : "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "ScaleUpPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "AutoScalingConfiguration" },
        "Cooldown" : {"Ref": "ScalingWaitTime"},
        "ScalingAdjustment" : "1"
      }
    },
    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "EvaluationPeriods": "1",
        "Statistic": "Average",
        "Threshold": "90",
        "AlarmDescription": "Alarm if CPU is > 90% for 5 minutes",
        "Period": "300",
        "AlarmActions": [ { "Ref": "ScaleUpPolicy" } ],
        "Namespace": "AWS/EC2",
        "Dimensions": [ {
          "Name": "AutoScalingGroupName",
          "Value": { "Ref": "AutoScalingConfiguration" }
        } ],
        "ComparisonOperator": "GreaterThanThreshold",
        "MetricName": "CPUUtilization"
      }
    },
    "ScaleDownPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "AutoScalingConfiguration" },
        "Cooldown" : {"Ref": "ScalingWaitTime"},
        "ScalingAdjustment" : "-1"
      }
    },
    "CPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "EvaluationPeriods": "1",
        "Statistic": "Average",
        "Threshold": "60",
        "AlarmDescription": "Alarm if CPU is < 60% for 5 minutes",
        "Period": "300",
        "AlarmActions": [ { "Ref": "ScaleDownPolicy" } ],
        "Namespace": "AWS/EC2",
        "Dimensions": [ {
          "Name": "AutoScalingGroupName",
          "Value": { "Ref": "AutoScalingConfiguration" }
        } ],
        "ComparisonOperator": "LessThanThreshold",
        "MetricName": "CPUUtilization"
      }
    }
  }
}
