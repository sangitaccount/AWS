{ "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "Create Elastic Load Balancer and attach EC2 instances",

  "Parameters": {
    "VPCId": {
      "Description": "VPC",
      "Type": "AWS::EC2::VPC::Id",
      "ConstraintDescription": "must be one of the existing VPCs"
    },
    "Ec2Instance1": {
      "Description": "EC2 Instance in AZ1",
      "Type": "AWS::EC2::Instance::Id"
    },
    "Ec2Instance2": {
      "Description": "EC2 Instance in AZ2",
      "Type": "AWS::EC2::Instance::Id"

    },
    "Ec2Instance3": {
      "Description": "EC2 Instance in AZ3",
      "Type": "AWS::EC2::Instance::Id"
    },

    "Subnet1": {
      "Description": "Subnet to create EC2",
      "Type": "AWS::EC2::Subnet::Id",
      "ConstraintDescription": "must be one of the existing subnets"
    },
    "Subnet2": {
      "Description": "Subnet to create EC2",
      "Type": "AWS::EC2::Subnet::Id",
      "ConstraintDescription": "must be one of the existing subnets"
    },
    "Subnet3": {
      "Description": "Subnet to create EC2",
      "Type": "AWS::EC2::Subnet::Id",
      "ConstraintDescription": "must be one of the existing subnets"
    }
  },

  "Resources": {

    "ELBSG": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "EC2 Security Group",
        "VpcId": {
          "Ref": "VPCId"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },

    "AWSELB":{
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "LoadBalancerName" : "AWSELB",
        "Subnets" : [{ "Ref" : "Subnet1" },{ "Ref" : "Subnet2" },{ "Ref" : "Subnet3" }],
        "Instances" : [ { "Ref" : "Ec2Instance1" },{ "Ref" : "Ec2Instance2" },{ "Ref" : "Ec2Instance3" } ],
        "SecurityGroups": [{"Ref" : "ELBSG"}],
        "Listeners": [{
          "LoadBalancerPort": "80",
          "InstancePort": "80",
          "Protocol": "HTTP"
        }],
        "HealthCheck": {
          "Target": "HTTP:80/test.html",
          "HealthyThreshold": "3",
          "UnhealthyThreshold": "5",
          "Interval": "30",
          "Timeout": "5"
        },
        "CrossZone": "True"
      }

    }

  }

}